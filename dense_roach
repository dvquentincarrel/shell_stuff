#!/bin/bash
# Dense Roach, as in Git Crawler (yes, I know)

FETCH=false
COLOR=true
PARALLEL=true

while getopts "fhnp" opt; do
    case $opt in
        h) echo "Usage: dense_roach [-fn]"
           echo "Walks subdirectories to give a summary of the state of the repositories"
           echo "  -f does git fetch before building status"
           echo "  -n removes colorization"
           echo "  -p removes parallelization"
           exit 0;;
        f) FETCH=true;;
        n) COLOR=false;;
        p) PARALLEL=false;;
        *) echo "invalid option '$opt'"
                exit 1;;
        esac
    done
    shift $((OPTIND -1)) 

function get_infos {
    status=$(git -C "$1" status)
    porcelain_status=$(git -C "$1" status --porcelain=1)
    flag=false
    grep -q "ahead\|diverged" <<< "$status" && ahead="AHEAD" && flag=true
    grep -q "behind\|diverged" <<< "$status" && behind="BEHIND" && flag=true
    untracked=$(grep -c '^??' <<< "$porcelain_status")
    unstaged=$(grep -c '^ .\|^MM' <<< "$porcelain_status")
    staged=$(grep -c '^. \|^MM' <<< "$porcelain_status")
    if [[ $((untracked + unstaged + staged)) -gt 0 ]]; then
        flag=true
    fi
    if $flag; then
        if $COLOR; then
            echo -e "\e[1m$1\e[m: \e[35m$ahead \e[36m$behind \e[32m$staged \e[33m$unstaged \e[31m$untracked\e[m"
        else
            echo "$1: $ahead $behind $staged $unstaged $untracked"
        fi
    else
        if $COLOR; then
            echo -e "\x1b[1m$1: \x1b[34mUp to date\x1b[m"
        else
            echo "$1: Up to date"
        fi
    fi
}
export -f get_infos

function check_dir {
    root=$(git -C "$1" rev-parse --show-toplevel 2>/dev/null | xargs basename 2>/dev/null)
    if [[ -n "$root" ]] && [[ "$root" == "$1" ]]; then
        if $2; then
            printf "fetching $1..."
            git -C "$1" fetch -q >/dev/null
            printf "\e[G\e[K"
        fi
        get_infos "$1"
        return 0
    else
        return 1
    fi
}
export -f check_dir


if $PARALLEL; then
    content=$(find * -type d -prune)
    parallel check_dir {1} $FETCH ::: $content
else
    find * -maxdepth 0 -type d -exec bash -c "check_dir {} $FETCH" ';'
fi
